<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="9d9a7623-25b8-4b95-8991-5b867a464609" name="Changes" comment="fix: reformat code">
      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2ZPdo537YP0kw4knExdshGG1ajx" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;JUnit.WallServiceTests.testFindBlockByColor.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$CountTests.shouldReturnAppropriateCountOfBlocksWhenGetCompositeBlockInput.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$CountTests.shouldReturnAppropriateCountOfBlocksWhenGetSimpleInput.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$FindBlockByColorTests.shouldReturnAppropriateColorOfBlockWhenGetComplexInput.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$FindBlockByColorTests.shouldReturnAppropriateColorOfBlockWhenGetCompositeBlockInput.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$FindBlockByColorTests.shouldReturnAppropriateColorOfBlockWhenGetNestedCompositeBlockInput.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$FindBlockByColorTests.shouldReturnFalseAtIsPresentSectionWhenBLocksWithGivenColorNoExists.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$FindBlocksByMaterialTests.shouldReturnAppropriateMaterialOfBlockWhenGetCompositeBlockInput.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$FindBlocksByMaterialTests.shouldReturnAppropriateMaterialOfBlockWhenGetNestedCompositeBlockInput.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$FindBlocksByMaterialTests.shouldReturnAppropriateMaterialOfBlockWhenGetSimpleInput.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$WallTests_1.testFindBlockByColor.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$testFindBlockByColor.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.WallTests$testFindBlockByColor.testFindBlockByColor.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\K1\JavaProjects\HorusTask" />
    </key>
  </component>
  <component name="RunManager" selected="JUnit.WallTests$FindBlockByColorTests.shouldReturnFalseAtIsPresentSectionWhenBLocksWithGivenColorNoExists">
    <configuration name="WallTests$CountTests.shouldReturnAppropriateCountOfBlocksWhenGetCompositeBlockInput" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="HorusTask" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.horus.services.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="org.horus.services.WallTests" />
      <option name="MAIN_CLASS_NAME" value="org.horus.services.WallTests$CountTests" />
      <option name="METHOD_NAME" value="shouldReturnAppropriateCountOfBlocksWhenGetCompositeBlockInput" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WallTests$CountTests.shouldReturnAppropriateCountOfBlocksWhenGetSimpleInput" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="HorusTask" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.horus.services.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="org.horus.services.WallTests" />
      <option name="MAIN_CLASS_NAME" value="org.horus.services.WallTests$CountTests" />
      <option name="METHOD_NAME" value="shouldReturnAppropriateCountOfBlocksWhenGetSimpleInput" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WallTests$FindBlockByColorTests.shouldReturnFalseAtIsPresentSectionWhenBLocksWithGivenColorNoExists" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="HorusTask" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.horus.services.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="org.horus.services.WallTests" />
      <option name="MAIN_CLASS_NAME" value="org.horus.services.WallTests$FindBlockByColorTests" />
      <option name="METHOD_NAME" value="shouldReturnFalseAtIsPresentSectionWhenBLocksWithGivenColorNoExists" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WallTests$FindBlocksByMaterialTests.shouldReturnAppropriateMaterialOfBlockWhenGetCompositeBlockInput" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="HorusTask" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.horus.services.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="org.horus.services.WallTests" />
      <option name="MAIN_CLASS_NAME" value="org.horus.services.WallTests$FindBlocksByMaterialTests" />
      <option name="METHOD_NAME" value="shouldReturnAppropriateMaterialOfBlockWhenGetCompositeBlockInput" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="WallTests$FindBlocksByMaterialTests.shouldReturnAppropriateMaterialOfBlockWhenGetNestedCompositeBlockInput" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
      <module name="HorusTask" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="org.horus.services.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <option name="PACKAGE_NAME" value="org.horus.services.WallTests" />
      <option name="MAIN_CLASS_NAME" value="org.horus.services.WallTests$FindBlocksByMaterialTests" />
      <option name="METHOD_NAME" value="shouldReturnAppropriateMaterialOfBlockWhenGetNestedCompositeBlockInput" />
      <option name="TEST_OBJECT" value="method" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="JUnit.WallTests$FindBlockByColorTests.shouldReturnFalseAtIsPresentSectionWhenBLocksWithGivenColorNoExists" />
        <item itemvalue="JUnit.WallTests$CountTests.shouldReturnAppropriateCountOfBlocksWhenGetCompositeBlockInput" />
        <item itemvalue="JUnit.WallTests$CountTests.shouldReturnAppropriateCountOfBlocksWhenGetSimpleInput" />
        <item itemvalue="JUnit.WallTests$FindBlocksByMaterialTests.shouldReturnAppropriateMaterialOfBlockWhenGetNestedCompositeBlockInput" />
        <item itemvalue="JUnit.WallTests$FindBlocksByMaterialTests.shouldReturnAppropriateMaterialOfBlockWhenGetCompositeBlockInput" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="9d9a7623-25b8-4b95-8991-5b867a464609" name="Changes" comment="" />
      <created>1702327848152</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1702327848152</updated>
      <workItem from="1702327851885" duration="4164000" />
      <workItem from="1702473670494" duration="61410000" />
      <workItem from="1702725720972" duration="2181000" />
      <workItem from="1702728603634" duration="10533000" />
      <workItem from="1703844716897" duration="22591000" />
      <workItem from="1703896919331" duration="611000" />
    </task>
    <task id="LOCAL-00001" summary="Implement Task Logic">
      <created>1702614009023</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1702614009023</updated>
    </task>
    <task id="LOCAL-00002" summary="Implement Task Logic">
      <created>1702646009822</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1702646009822</updated>
    </task>
    <task id="LOCAL-00003" summary="feature: create logic of given functions and tests passed">
      <created>1702731505494</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1702731505494</updated>
    </task>
    <task id="LOCAL-00004" summary="fix: reformat code">
      <option name="closed" value="true" />
      <created>1703897004331</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1703897004331</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Implement Task Logic" />
    <MESSAGE value="feature: create logic of given functions and tests passed" />
    <MESSAGE value="fix: reformat code" />
    <option name="LAST_COMMIT_MESSAGE" value="fix: reformat code" />
  </component>
</project>